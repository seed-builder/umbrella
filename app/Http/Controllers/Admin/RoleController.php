<?php
namespace App\Http\Controllers\Admin;

use App\Models\Permission;
use Illuminate\Http\Request;
use App\Http\Controllers\Admin\BaseController;
use App\Models\Role;

class RoleController extends BaseController
{
	public function newEntity(array $attributes = [])
	{
		// TODO: Implement newEntity() method.
		return new Role($attributes);
	}

	/**
	* Display a listing of the resource.
	*
	* @return  \Illuminate\Http\Response
	*/
	public function index()
	{
		//
		return view('admin.role.index');
	}

	/**
	* Show the form for creating a new resource.
	*
	* @return  \Illuminate\Http\Response
	*/
	public function create()
	{
		return view('admin.role.create');
	}

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param array $extraFields
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request,  $only = [], $extraFields = [], $redirect_url = null)
    {
        $data = $request->input('data', []);
        if (empty($data))
            return $this->fail('data is empty');
        //$props = current($data);
        $props = $this->beforeSave(current($data));
        $fieldErrors = $this->validateFields($props);
        if (!empty($fieldErrors)) {
            return $this->fail('validate error', $fieldErrors);
        } else {
            if (!empty($extraFields)) {
                $props += $extraFields;
            }
            $entity = $this->newEntity($props);
            $entity->save();
            return $this->success($entity);
        }
    }

	/**
	* Display the specified resource.
	*
	* @param    int  $id
	* @return  \Illuminate\Http\Response
	*/
	public function edit($id)
	{
		$entity = Role::find($id);
		return view('admin.role.edit', ['entity' => $entity]);
	}

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  int $id
     * @param array $extraFields
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id, $only = [], $extraFields = [], $redirect_url = null)
    {
        //
        $data = $request->input('data', []);
        if (empty($data))
            return $this->fail('data is empty');

        //$props = current($data);
        $props = $this->beforeSave(current($data));
        $fieldErrors = $this->validateFields($props);
        if (!empty($fieldErrors)) {
            return $this->fail('validate error', $fieldErrors);
        } else {
            if (!empty($extraFields)) {
                $props += $extraFields;
            }
            $entity = $this->newEntity()->newQuery()->find($id);
            $entity->fill($props);
            $entity->save();
            $this->afterSave($entity);
            return $this->success($entity);
        }
    }


    /**
	* Display the specified resource.
	*
	* @param    int  $id
	* @return  \Illuminate\Http\Response
	*/
	public function show($id)
	{
		//
	}

	/**
	 * @param  Request $request
	 * @param  array $searchCols
	 * @param array $with
	 * @param null $conditionCall
	 * @param bool $all_columns
	 * @return \Illuminate\Http\JsonResponse
	 */
	public function pagination(Request $request, $searchCols = [], $with = [], $conditionCall = null, $dataHandleCall = null, $all_columns = false)
    {
        $searchCols = ["description","display_name","name"];
        return parent::pagination($request, $searchCols, $with, $conditionCall, $dataHandleCall, $all_columns); // TODO: Change the autogenerated stub
    }

    public function setPermission(Request $request, $id){
//		$perms = Permission::all();

		$role = Role::find($id);

		if($request->isMethod('post')){
			$perms = $request->input('perms','');
			$ids = explode(',', $perms);
			$role->perms()->sync($ids);
			$this->flash_success('设置权限成功！');
		}
		$tops = Permission::where('pid', 0)->orderBy('sort')->get();
		$perms =[];// ['text' => 'root', 'selectable' => false, 'state' => [ 'expanded' => true ], 'nodes' => []];
		foreach ($tops as $top)
			$perms[] = $this->toBootstrapTreeViewData($top,  ['text' => 'display_name', 'dataid' => 'id', 'icon' => 'logo'], false);

		foreach ($perms as &$perm){
			$this->checkRolePerm($role, $perm);
		}

		return view('admin.role.permission', ['perms' => $perms, 'role' => $role]);
	}

	protected function checkRolePerm($role, &$node){
		$perm = $node['item'];
		if($role->hasPermission($perm->name)){
			$node['state']['checked'] = true;
		}
		if(!empty($node['nodes'])){
			foreach ($node['nodes'] as &$n){
				$this->checkRolePerm($role, $n);
			}
		}
	}

}
