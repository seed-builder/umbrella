<?php

namespace App\Models;

use App\Events\ModelCreatedEvent;
use App\Events\ModelUpdatedEvent;
use App\Events\PaymentEvent;
use App\Helpers\Utl;
use Illuminate\Database\Eloquent\Model;
use App\Models\BaseModel;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

/**
 * model description
 * Class CustomerPayment
 * @package  App\Models
 *
 * @author  xrs
 * @SWG\Model(id="CustomerPayment")
 * @SWG\Property(name="amt", type="number", description="订单金额")
 * @SWG\Property(name="created_at", type="string", description="")
 * @SWG\Property(name="creator_id", type="integer", description="创建用户id")
 * @SWG\Property(name="customer_id", type="integer", description="customer id")
 * @SWG\Property(name="deleted_at", type="string", description="")
 * @SWG\Property(name="id", type="integer", description="")
 * @SWG\Property(name="modifier_id", type="integer", description="修改用户id")
 * @SWG\Property(name="outer_order_sn", type="string", description="外部订单号 支付宝|微信生成的订单号")
 * @SWG\Property(name="payment_channel", type="integer", description="支付渠道 1-微信支付 2-支付宝")
 * @SWG\Property(name="reference_id", type="integer", description="关联表id")
 * @SWG\Property(name="reference_type", type="string", description="关联表类型")
 * @SWG\Property(name="remark", type="string", description="备注")
 * @SWG\Property(name="sn", type="string", description="内部订单号 系统内部的订单号")
 * @SWG\Property(name="status", type="integer", description="支付状态（1-未支付, 2-已支付, 3-支付失败）")
 * @SWG\Property(name="type", type="integer", description="流水类型 1-充值（收入）， 2-押金充值， 3-押金支出， 4-押金退回， 5-借伞租金支出， 6-账户提现")
 * @SWG\Property(name="updated_at", type="string", description="")
 */
class CustomerPayment extends BaseModel
{
	/**
	 * 支付状态（1-未支付）
	 */
	const STATUS_INIT = 1;
	/**
	 * 支付状态（2-已支付）
	 */
	const STATUS_SUCCESS=2;
	/**
	 * 支付状态（3-支付失败）
	 */
	const STATUS_FAIL=3;

	/**
	 * 流水类型 1-充值（收入）
	 */
	const TYPE_IN_CHARGE = 1;
	/**
	 * 流水类型 2-押金充值（收入）
	 */
	const TYPE_IN_DEPOSIT = 2;
	/**
	 * 流水类型 3-押金支出
	 */
	const TYPE_OUT_DEPOSIT = 3;
	/**
	 * 流水类型 4-押金退回（收入）
	 */
	const TYPE_INT_DEPOSIT_BACK = 4;
	/**
	 * 流水类型 5-借伞租金支出
	 */
	const TYPE_OUT_RENT = 5;
	/**
	 * 流水类型 6-账户提现
	 */
	const TYPE_OUT_WITHDRAW = 6;



    //
    protected $table = 'customer_payments';
    protected $guarded = ['id'];

    public $validateRules = [
        'amt' => 'required|numeric|min:1',
    ];

    public $validateMessages = [
        'amt.required' => "请选择一个金额",
        'amt.numeric' => '金额只能为数字',
        'amt.min' => '每次充值最低1元哦~',
    ];

    public function customer()
    {
        return $this->hasOne(Customer::class, 'id', 'customer_id');
    }

    /**
     * 实体（多态关联-Employee,Customer）
     * @return \Illuminate\Database\Eloquent\Relations\MorphTo
     */
    public function reference()
    {
        return $this->morphTo();
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function ($model) {
            event(new ModelCreatedEvent($model));
            event(new PaymentEvent($model));
        });
        static::updated(function ($model) {
            event(new ModelUpdatedEvent($model));

            $utl = new Utl();
            $utl->addLog($model, '微信支付回调-更新订单中-进入事件监听', CustomerPayment::STATUS_SUCCESS);

            event(new PaymentEvent($model));

        });
    }

    public function type($type = null)
    {
        $type = empty($type) ? $this->type : $type;

        switch ($type) {
            case 1: {
                return '账户充值';
            }
            case 2: {
                return '押金充值';
            }
            case 3: {
                return '押金支出';
            }
            case 4: {
                return '押金退回';
            }
            case 5: {
                return '借伞租金支出';
            }
            case 6: {
                return '账户提现';
            }
        }
    }

    public function channel()
    {
        switch ($this->payment_channel) {
            case 1: {
                return '微信支付';
            }
            case 2: {
                return '支付宝';
            }
            default : {
                return '微信支付';
            }
        }
    }

    public function status()
    {
        switch ($this->status) {
            case CustomerPayment::STATUS_INIT: {
                return '未完成';
            }
            case CustomerPayment::STATUS_SUCCESS: {
                return '已完成';
            }
            case CustomerPayment::STATUS_FAIL: {
                return '已取消';
            }
            default : {
                return '未完成';
            }
        }
    }

    /**
     * 首字母 A账户 Y押金 H租用纪录
     * 第二个字母 C充值 O支出 B退回 W提现
     * @param $type
     * @return string
     */
    public function snFlag($type)
    {
        switch ($type) {
            case CustomerPayment::TYPE_IN_CHARGE: {
                return 'AC';
            }
            case CustomerPayment::TYPE_IN_DEPOSIT: {
                return 'YC';
            }
            case CustomerPayment::TYPE_OUT_DEPOSIT: {
                return 'YO';
            }
            case CustomerPayment::TYPE_INT_DEPOSIT_BACK: {
                return 'YB';
            }
            case CustomerPayment::TYPE_OUT_RENT: {
                return 'HO';
            }
            case CustomerPayment::TYPE_OUT_WITHDRAW: {
                return 'AW';
            }
        }
    }

    /**
     * 创建资金纪录
     * @param $data
     * @param int $status
     * @return mixed
     */
    public function createPayment($data, $status = CustomerPayment::STATUS_INIT)
    {
        if (empty($data['customer_id'])) {
            $customer = Auth::guard('mobile')->user();
        } else {
            $customer = Customer::find($data['customer_id']);
        }

        $payment = [
            'customer_account_id' => $customer->account->id,
            'customer_id' => $customer->id,
            'sn' => $this->snFlag($data['type']) . date('YmdHis') . $customer->id . random_int(1000, 9999),
            'payment_channel' => 1,
            'amt' => $data['amt'],
            'type' => $data['type'],
            'status' => $status,
            'remark' => env('PROJECT_NAME') . $this->type($data['type']),
        ];

        if (!empty($data['reference_id']) && !empty($data['reference_type'])) {
            $payment['reference_id'] = $data['reference_id'];
            $payment['reference_type'] = $data['reference_type'];
        }

        $entity = new CustomerPayment($payment);
        $entity->save();

        return $entity;
    }


}
